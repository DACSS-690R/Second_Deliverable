geom_bar(position = "dodge") +
labs(title = "Treatment Success by Source of Referral", y = "Frequency", x = "Success") +
theme(plot.title = element_text(hjust=0.5)) +
scale_fill_discrete(labels=c('Individual/Family Member', 'Healthcare Provider', 'School/Employer', 'Other Community Referral', 'Court/Criminal Justice System', 'NA')) +
scale_x_discrete(labels=c('Did Not Complete Treatment', 'Completed Treatment')) +
guides(fill = guide_legend(title = "Source of Referral:"))
blr1 <-glm(SUCCESS~REFERRAL+GENDER+MARSTAT+EMPLOY, family=binomial(link = "logit"),data=teds2)
summary(blr1)
library(car)
vif(blr1)
par(mfrow = c(2,3))
plot(blr1, which=1:6)
par(mfrow = c(2,3))
plot(blr1, which = 1:6)
library(effects)
plot(allEffects(blr1))
plot(blr1)
library(effects)
plot(allEffects(blr1))
par(mfrow = c(2,3))
plot(blr1, which = 1:6, col.points = "blue")
par(mfrow = c(2,3))
plot(blr1, which = 1:6, col = "blue")
colors()[1:100]
colors()[1:300]
colors()[300:500]
par(mfrow = c(2,3))
plot(blr1, which = 1:6, col = "navy")
par(mfrow = c(2,3))
plot(blr1, which = 1:6, col = "navy")
par(mfrow = c(3,2))
plot(blr1, which = 1:6, col = "navy")
par(mfrow = c(3,2),pin=c(1.9,1.9))
plot(blr1, which = 1:6, col = "navy")
par(mfrow = c(3,2),pin=c(1,1))
plot(blr1, which = 1:6, col = "navy")
par(mfrow = c(3,2),pin = c(1.5,1.5))
plot(blr1, which = 1:6, col = "navy")
par(mfrow = c(3,2),pin = c(2.0,1.4))
plot(blr1, which = 1:6, col = "navy")
par(mfrow = c(3,2),pin = c(1.8,1.2))
plot(blr1, which = 1:6, col = "navy")
par(mfrow = c(3,2),pin = c(1.8,1.0))
plot(blr1, which = 1:6, col = "navy")
par(mfrow = c(3,2),pin = c(2.0,1.0))
plot(blr1, which = 1:6, col = "navy")
runif(3, min=0, max=100)
runif(3, min=0, max=100)
set.seed(1213)
runif(3, min=0, max=100)
set.seed(1213)
runif(3, min=0, max=100)
set.seed(1213)
rpois(100, lambda = .2)
rpois(100, lambda = .6)
rpois(100, lambda = 1)
rpois(100, lambda = 2.5)
rpois(100, lambda = 4)
set.seed(1213)
rpois(100, lambda = .05)
rpois(100, lambda = .6)
rpois(100, lambda = 1)
rpois(100, lambda = 1.8)
rpois(100, lambda = 3)
set.seed(1213)
rpois(100, lambda = .05)
rpois(100, lambda = .6)
rpois(100, lambda = 1)
rpois(100, lambda = 1.8)
rpois(100, lambda = 3)
set.seed(1213)
rpois(100, lambda = .05)
rpois(100, lambda = .5)
rpois(100, lambda = 1)
rpois(100, lambda = 1.8)
rpois(100, lambda = 2.3)
set.seed(1213)
rpois(100, lambda = .05)
rpois(100, lambda = .5)
rpois(100, lambda = 1)
rpois(100, lambda = 1.8)
rpois(100, lambda = 2.3)
dpois(0,.5)
dpois(1,.5)
dpois(2,.5)
dpois(3,.5)
dpois(4,.5)
dpois(0,1)
dpois(1,1)
dpois(2,1)
dpois(3,1)
dpois(4,1)
dpois(0,.5)
dpois(1,.5)
dpois(2,.5)
dpois(3,.5)
dpois(4,.5)
plot(dpois(x=0:4,lambda=.5))
dpois(0,1)
dpois(1,1)
dpois(2,1)
dpois(3,1)
dpois(4,1)
plot(dpois(x=0:4,lambda=1))
plot(dpois(x=0:100,lambda=.5))
plot(dpois(x=0:10,lambda=.5))
plot(dpois(x=0:10,lambda=.5))
plot(dpois(x=0:10,lambda=1))
plot(dpois(x=0:10,lambda=.5))
plot(dpois(x=0:10,lambda=1))
plot(dpois(x=0:10,lambda=1,
ylab='p(y)',
xlab ='y'))
plot(dpois(x=0:10,lambda=1),
ylab='p(y)',
xlab ='y')
plot(dpois(x=0:10,lambda=.5),
ylab='p(y)',
xlab ='y')
library(ggplot2)
d <- data.frame(x = rep(1:10, 2), lambda = rep(c(.5, 1), each = 10))
d |>
ggplot(aes(x = x, y = dpois(x, lambda),
fill = as.factor(lambda),
group = lambda)
) +
geom_col(position = 'dodge')
library(ggplot2)
d <- data.frame(x = rep(0:4, 2), lambda = rep(c(.5, 1), each = 5))
d |>
ggplot(aes(x = x, y = dpois(x, lambda),
fill = as.factor(lambda),
group = lambda)
) +
geom_col(position = 'dodge')
library(ggplot2)
d <- data.frame(x = rep(0:15, 2), lambda = rep(c(.5, 1), each = 15))
library(ggplot2)
d <- data.frame(x = rep(0:15, 2), lambda = rep(c(.5, 1), each = 15))
library(ggplot2)
d <- data.frame(x = rep(1:15, 2), lambda = rep(c(.5, 1), each = 15))
d |>
ggplot(aes(x = x, y = dpois(x, lambda),
fill = as.factor(lambda),
group = lambda)
) +
geom_col(position = 'dodge')
dpois(0,.5)
dpois(1,.5)
dpois(2,.5)
dpois(3,.5)
dpois(4,.5)
dpois(5,.5)
dpois(6,.5)
dpois(7,.5)
dpois(8,.5)
dpois(9,.5)
dpois(10,.5)
dpois(1,.5)
dpois(2,.5)
dpois(3,.5)
dpois(4,.5)
dpois(5,.5)
dpois(6,.5)
dpois(7,.5)
dpois(8,.5)
dpois(9,.5)
dpois(10,.5)
plot(dpois(x=0:10,lambda=.5),
ylab='p(y)',
xlab ='y')
plot(dpois(x=0:10,lambda=1),
ylab='p(y)',
xlab ='y')
dpois(0,.5)
dpois(1,.5)
dpois(2,.5)
dpois(3,.5)
dpois(4,.5)
dpois(5,.5)
dpois(6,.5)
dpois(7,.5)
dpois(8,.5)
dpois(9,.5)
dpois(10,.5)
plot(dpois(x=0:10,lambda=.5),
ylab='p(y)',
xlab ='y')
plot(dpois(x=0:10,lambda=1),
ylab='p(y)',
xlab ='y')
library(ggplot2)
d <- data.frame(x = rep(0:10, 2), lambda = rep(c(.5, 1), each = 11))
d |>
ggplot(aes(x = x, y = dpois(x, lambda),
fill = as.factor(lambda),
group = lambda)
) +
geom_col(position = 'dodge')
plot(dpois(x=0:10,lambda=1),
ylab='dpois(x)',
xlab ='x',
legend("topright", paste("lambda=",lambda)))
plot(dpois(x=0:10,lambda=1),
ylab='dpois(x)',
xlab ='x',
legend("topright", paste("lambda=1")))
plot(dpois(x=0:10,lambda=1),
ylab='dpois(x)',
xlab ='x',
legend("topright", "lambda=1"))
library(ggplot2)
ggplot(data.frame(x=c(0:10)), aes(x)) +
geom_point(aes(y=dpois(x, 1)), colour="red")
plot(dpois(x=0:10,lambda=1),
ylab='dpois(x)',
xlab ='x',
legend("topright", "lambda=1"))
plot(dpois(x=0:10,lambda=.5),
ylab='dpois(x)',
xlab ='x')
ggplot(data.frame(x=c(0:10)), aes(x)) +
geom_point(aes(y=dpois(x, 1)), colour="red")
ggplot(data.frame(x=c(0:10)), aes(x)) +
geom_point(aes(y=dpois(x, .5)), colour="red")
lambdas <- c(.5, 1)
ggplot(data = data.frame(x = 0:10)) +
lapply(lambdas, function(l) geom_point(aes(x = x, y = dpois(x, lambda = l), col = factor(l)))) +
lapply(lambdas, function(l) stat_function(fun = dnorm, args = list(mean = l, sd = sqrt(l)),
aes(x = x, col = factor(l))))
dpois(0,.5)
dpois(1,.5)
dpois(2,.5)
dpois(3,.5)
dpois(4,.5)
dpois(5,.5)
dpois(6,.5)
dpois(0,1)
dpois(1,1)
dpois(2,1)
dpois(3,1)
dpois(4,1)
dpois(5,1)
dpois(6,1)
library(ggplot2)
lambdas <- c(.5, 1)
ggplot(data = data.frame(x = 0:10)) +
lapply(lambdas, function(l) geom_point(aes(x = x, y = dpois(x, lambda = l), col = factor(l)))) +
lapply(lambdas, function(l) stat_function(fun = dnorm, args = list(mean = l, sd = sqrt(l)),
aes(x = x, col = factor(l))) +
+ labs(x = "y") +
+ labs(y = "dpois(x, lambda = l)"))
library(ggplot2)
lambdas <- c(.5, 1)
ggplot(data = data.frame(x = 0:10)) +
lapply(lambdas, function(l) geom_point(aes(x = x, y = dpois(x, lambda = l), col = factor(l)))) +
lapply(lambdas, function(l) stat_function(fun = dnorm, args = list(mean = l, sd = sqrt(l)),
aes(x = x, col = factor(l))) +
labs(x = "y") +
labs(y = "dpois(x, lambda = l)"))
library(tinytex)
update.packages(ask = FALSE, checkBuilt = TRUE)
library(tinytex)
tinytex::tlmgr_update()
update.packages(ask = FALSE, checkBuilt = TRUE)
library(tinytex)
update.packages(ask = FALSE, checkBuilt = TRUE)
library(tinytex)
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
install.packages("plotly")
library(plotly)
install.packages("readxl")
install.packages("jsonlite")
#install.packages("jsonlite")
library(jsonlite)
endPoint="https://data.lacity.org/resource/2nrs-mtv8.json"
LA_Crime_data = fromJSON(endPoint)
head(LA_Crime_data)
library(readxl)
folder="dataFiles"
fileName="UMassChan_ClerkshipGrades.xlsx"
fileToRead=file.path(folder,fileName)
fileToRead
ClerkshipGrades_data=read_xlsx(fileToRead)
View(ClerkshipGrades_data)
library(readxl)
folder="dataFiles"
fileName="UMassChan_ClerkshipGrades.xlsx"
fileToRead=file.path(folder,fileName)
fileToRead
ClerkshipGrades_data=read_xlsx(fileToRead)
head(ClerkshipGrades_data)
folder="dataFiles"
fileName="Social_Media_and_Mental_Health.csv"
fileToRead=file.path(folder,fileName)
fileToRead
SMMH_data=read.csv(fileToRead)
View(SMMH_data)
#install.packages("jsonlite")
library(jsonlite)
endPoint="https://data.lacity.org/resource/2nrs-mtv8.json"
LA_Crime_data = fromJSON(endPoint)
View(LA_Crime_data)
setwd("C:/Users/CarlinML/DACSS-690R")
getwd()
# Chunk 1
setwd("C:/Users/CarlinML/DACSS-690R")
getwd()
# Chunk 2
folder="dataFiles"
fileName="Social_Media_and_Mental_Health.csv"
fileToRead=file.path(folder,fileName)
fileToRead
SMMH_dirty=read.csv(fileToRead,check.names=F)
SMMH_dirty
# Chunk 3
SMMH_dirty[,]=sapply(SMMH_dirty[,],trimws)
SMMH_clean=SMMH_dirty[,]
View(SMMH_clean)
str(SMMH_clean)
# Chunk 4
library("dplyr")
SMMH_clean <- rename(SMMH_clean,
Age = "1. What is your age?",
Gender = "2. Gender",
RelStatus = "3. Relationship Status",
OccStatus = "4. Occupation Status",
OrgAffil = "5. What type of organizations are you affiliated with?",
UseSocialMedia = "6. Do you use social media?",
Platforms = "7. What social media platforms do you commonly use?",
AmtTime = "8. What is the average time you spend on social media every day?",
WoutPurpose = "9. How often do you find yourself using Social media without a specific purpose?",
Distracted = "10. How often do you get distracted by Social media when you are busy doing something?",
Restless = "11. Do you feel restless if you haven't used Social media in a while?",
EasilyDist = "12. On a scale of 1 to 5, how easily distracted are you?",
Bothered = "13. On a scale of 1 to 5, how much are you bothered by worries?",
DiffConcen = "14. Do you find it difficult to concentrate on things?",
Compare = "15. On a scale of 1-5, how often do you compare yourself to other successful people through the use of social media?",
Comparisons = "16. Following the previous question, how do you feel about these comparisons, generally speaking?",
Validation = "17. How often do you look to seek validation from features of social media?",
Depressed = "18. How often do you feel depressed or down?",
Interest = "19. On a scale of 1 to 5, how frequently does your interest in daily activities fluctuate?",
Sleep = "20. On a scale of 1 to 5, how often do you face issues regarding sleep?")
# Chunk 5
table(SMMH_clean$Gender)
SMMH_clean[SMMH_clean$Gender=='NB','Gender']='Non-binary'
SMMH_clean[SMMH_clean$Gender=='Non binary','Gender']='Non-binary'
SMMH_clean[SMMH_clean$Gender=='Nonbinary','Gender']='Non-binary'
SMMH_clean[SMMH_clean$Gender=='unsure','Gender']='NA'
SMMH_clean[SMMH_clean$Gender=='There are others???','Gender']='NA'
table(SMMH_clean$Gender)
# Chunk 6
table(SMMH_clean$RelStatus) # no cleaning needed
table(SMMH_clean$OccStatus) # no cleaning needed
table(SMMH_clean$OrgAffil) # clean up N/As
SMMH_clean$OrgAffil <- gsub("Goverment", "Government",
gsub("N/A", "NA",
gsub(", N/A", "", SMMH_clean$OrgAffil)))
table(SMMH_clean$OrgAffil)
# Chunk 7
table(SMMH_clean$UseSocialMedia) # no cleaning needed
table(SMMH_clean$Platforms) # may need to clean but would be easier if data was formatted differently
table(SMMH_clean$AmtTime) # no cleaning needed
# Chunk 8
folder <- "Second_Deliverable/DataCleanAndFormatted"
# Check if the folder exists
if (!dir.exists(folder)) {
# Create the folder
dir.create(folder)
write.csv(SMMH_clean,file.path(folder,"SMMH_clean.csv"),row.names = F)
} else {
write.csv(SMMH_clean,file.path(folder,"SMMH_clean.csv"),row.names = F)}
# Chunk 9
linkSMMH_clean='https://github.com/DACSS-690R/Second_Deliverable/raw/refs/heads/main/DataCleanAndFormatted/SMMH_clean.csv'
SMMH_clean=read.csv(linkSMMH_clean)
str(SMMH_clean)
# Chunk 10
SMMH_clean$Gender_label <- as.factor(SMMH_clean$Gender)
SMMH_clean$RelStatus_label <- as.factor(SMMH_clean$RelStatus)
SMMH_clean$OccStatus_label <- as.factor(SMMH_clean$OccStatus)
SMMH_clean$OrgAffil_label <- as.factor(SMMH_clean$OrgAffil)
SMMH_clean$UseSocialMedia_label <- as.factor(SMMH_clean$UseSocialMedia)
str(SMMH_clean)
# Chunk 11
# map for replacement: 1 the lowest # hours / 6 the highest # hours
map_AmtTime <- c("Less than an Hour"=1, "Between 1 and 2 hours"=2,"Between 2 and 3 hours"=3, "Between 3 and 4 hours"=4, "Between 4 and 5 hours"=5, "More than 5 hours"=6)
SMMH_clean$AmtTime_int=map_AmtTime[SMMH_clean$AmtTime]
SMMH_clean$AmtTime_label <- factor(SMMH_clean$AmtTime_int, levels = seq(1,6),labels = c('1_Less than an Hour','2_Between 1 and 2 hours','3_Between 2 and 3 hours','4_Between 3 and 4 hours','5_Between 4 and 5 hours', '6_More than 5 hours'),ordered = TRUE)
# Chunk 12
theInts=seq(1,5)
theLabels=c('1_Strongly Disagree','2_Disagree','3_Neutral','4_Agree','5_Strongly Agree')
FormatOrdinal=function(col) factor(col,
levels = theInts,
labels = theLabels,
ordered = TRUE)
names <- c(10:21)
SMMH_clean[names]=lapply(SMMH_clean[names],FormatOrdinal)
str(SMMH_clean)
# Chunk 13
folder = "DataCleanAndFormatted"
# Check if the folder exists
if (!dir.exists(folder)) {
# Create the folder
dir.create(folder)
saveRDS(SMMH_clean,file.path(folder,"SMMH_formatted.RDS"))
} else {
saveRDS(SMMH_clean,file.path(folder,"SMMH_formatted.RDS"))
}
# Chunk 14
library(readxl)
folder="dataFiles"
fileName="UMassChan_ClerkshipGrades.xlsx"
fileToRead=file.path(folder,fileName)
fileToRead
ClerkshipGrades_dirty=read_xlsx(fileToRead, skip=1)
ClerkshipGrades_dirty
# Chunk 15
ClerkshipGrades_dirty[,]=sapply(ClerkshipGrades_dirty[,],trimws)
ClerkshipGrades_clean=ClerkshipGrades_dirty[,]
View(ClerkshipGrades_clean)
str(ClerkshipGrades_clean)
# Chunk 16
ClerkshipGrades_clean <- rename(ClerkshipGrades_clean,
NBME_Letter = `NBME-Written_Letter`,
NBME_Numeric = `NBME-Written_Numeric`)
# Chunk 17
table(ClerkshipGrades_clean$Subject) # no cleaning needed
table(ClerkshipGrades_clean$Catalog) # no cleaning needed
table(ClerkshipGrades_clean$Session) # no cleaning needed
table(ClerkshipGrades_clean$Location) # no cleaning needed
table(ClerkshipGrades_clean$Final_Letter)
ClerkshipGrades_clean <- ClerkshipGrades_clean %>%
mutate(Final_Letter2 = recode(Final_Letter,
"HH" = "High Honors",
"H" = "Honors",
"P" = "Pass",
"S" = "Satisfactory",
"F" = "Fail",
"I" = "Incomplete"))
table(ClerkshipGrades_clean$Final_Letter2)
table(ClerkshipGrades_clean$SPE_Letter)
ClerkshipGrades_clean <- ClerkshipGrades_clean %>%
mutate(SPE_Letter2 = recode(SPE_Letter,
"HONORS" = "Honors"))
table(ClerkshipGrades_clean$SPE_Letter2)
table(ClerkshipGrades_clean$NBME_Letter)
ClerkshipGrades_clean <- ClerkshipGrades_clean %>%
mutate(NBME_Letter2 = recode(NBME_Letter,
"HIGH HONORS" = "High Honors",
"HONORS" = "Honors",
"PASS" = "Pass"))
table(ClerkshipGrades_clean$NBME_Letter2)
table(ClerkshipGrades_clean$OSCE_Letter)
ClerkshipGrades_clean <- ClerkshipGrades_clean %>%
mutate(OSCE_Letter2 = recode(OSCE_Letter,
"HIGH HONORS" = "High Honors",
"HONORS" = "Honors",
"PASS" = "Pass"))
table(ClerkshipGrades_clean$OSCE_Letter2)
# Chunk 18
ClerkshipGrades_clean[!complete.cases(ClerkshipGrades_clean),]
ClerkshipGrades_clean[1,]
colSums(is.na(apply(ClerkshipGrades_clean[,c(10,12,14,16)],2, as.numeric)))
detectWrongNA= function(col){col[grep("[^\\d+\\.*\\d*]", col, perl=T,invert = F)]}
badSymbolNum=sapply(ClerkshipGrades_clean[, c('Final_Numeric','SPE_Numeric','NBME_Numeric', 'OSCE_Numeric')],detectWrongNA)
badSymbolNum_unlist=unlist(badSymbolNum)
badSymbolNum_vector=unique(badSymbolNum_unlist)
badSymbolNum_vector
ClerkshipGrades_clean[, c('Final_Numeric','SPE_Numeric','NBME_Numeric', 'OSCE_Numeric')]=lapply(ClerkshipGrades_clean[, c('Final_Numeric','SPE_Numeric','NBME_Numeric', 'OSCE_Numeric')],function(col) ifelse((col %in% badSymbolNum_vector), NA, col))
ClerkshipGrades_clean
# Chunk 19
folder <- "Second_Deliverable/DataCleanAndFormatted"
# Check if the folder exists
if (!dir.exists(folder)) {
# Create the folder
dir.create(folder)
write.csv(SMMH_clean,file.path(folder,"ClerkshipGrades_clean.csv"))
} else {
write.csv(ClerkshipGrades_clean,file.path(folder,"ClerkshipGrades_clean.csv"))}
# Chunk 20
linkClerkshipGrades_clean='https://github.com/DACSS-690R/Second_Deliverable/raw/refs/heads/main/DataCleanAndFormatted/ClerkshipGrades_clean.csv'
ClerkshipGrades_clean=read.csv(linkClerkshipGrades_clean)
str(ClerkshipGrades_clean)
# Chunk 21
ClerkshipGrades_clean[,16:19] <- lapply(ClerkshipGrades_clean[,16:19],toupper)
Likert_cols <- c(16:19)
ClerkshipGrades_clean[,Likert_cols] <- lapply(ClerkshipGrades_clean[,Likert_cols] , factor, ordered = TRUE, levels = c("FAIL", "INCOMPLETE", "SATISFACTORY", "PASS", "HONORS", "HIGH HONORS"))
str(ClerkshipGrades_clean)
# Chunk 22
folder = "DataCleanAndFormatted"
# Check if the folder exists
if (!dir.exists(folder)) {
# Create the folder
dir.create(folder)
saveRDS(ClerkshipGrades_clean,file.path(folder,"
ClerkshipGrades_formatted.RDS"))
} else {
saveRDS(ClerkshipGrades_clean,file.path(folder,"ClerkshipGrades_formatted.RDS"))
}
# Chunk 23
#install.packages("jsonlite")
library(jsonlite)
endPoint="https://data.lacity.org/resource/2nrs-mtv8.json"
LA_Crime_data = fromJSON(endPoint)
View(LA_Crime_data)
write.csv(LA_Crime_data, "../dataFiles/Crime_Data_subset.csv")
getwd()
setwd("C:/Users/CarlinML/DACSS-690R/Second_Deliverable")
getwd()
getwd()
setwd(C:/Users/CarlinML/DACSS-690R)
