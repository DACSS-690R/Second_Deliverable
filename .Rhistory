"Japanese" = "J",
"Korean" = "K",
"Laotian" = "L",
"Other" = "O",
"Pacific Islander" = "P",
"Samoan" = "S",
"Hawaiian" = "U",
"Vietnamese" = "V",
"White" = "W",
"Unknown" = "X",
"Asian Indian", "Z"))
Crime_dirty <- read.csv("https://github.com/DACSS-690R/First_Deliverable/raw/refs/heads/main/dataFiles/Crime_Data_from_2020_to_Present_subset.csv",check.names=F)
Crime_dirty
Crime_dirty[,]=sapply(Crime_dirty[,],trimws)
Crime_clean=Crime_dirty[,]
Crime_clean=Crime_clean[,2:28]
View(Crime_clean)
str(Crime_clean)
Crime_clean <- rename(Crime_clean,
RecordNumber = "dr_no",
DateReported = "date_rptd",
DateOccurred = "date_occ",
TimeOccurred = "time_occ",
GeographicAreaID = "area",
GeographicAreaName = "area_name",
GeographicSubAreaID = "rpt_dist_no",
Part1_2 = "part_1_2",
CrimeCode = "crm_cd",
CrimeCodeDesc = "crm_cd_desc",
VictimAge = "vict_age",
VictimSex = "vict_sex",
VictimEthnicity = "vict_descent",
CrimeSceneCode = "premis_cd",
CrimeSceneDesc = "premis_desc",
CaseStatus = "status",
CaseStatusDesc = "status_desc",
CrimeCode1 = "crm_cd_1",
CrimeCode2 = "crm_cd_2",
AddressCrime = "location",
LatitudeCrime = "lat",
LongitudeCrime = "lon",
CriminalCharacteristicCodes = "mocodes",
WeaponUsedCode = "weapon_used_cd",
WeaponUsedDesc = "weapon_desc",
CrossStreet = "cross_street",
CrimeCode3 = "crm_cd_3")
Crime_clean$DateReported=strptime(Crime_clean$DateReported, "%Y-%m-%dT%H:%M:%S")
Crime_clean$DateOccurred=strptime(Crime_clean$DateOccurred, "%Y-%m-%dT%H:%M:%S")
str(Crime_clean)
table(Crime_clean$GeographicAreaID) #no cleaning needed
table(Crime_clean$GeographicAreaName) #no cleaning needed
table(Crime_clean$GeographicSubAreaID) #no cleaning needed
table(Crime_clean$Part1_2) #no cleaning needed
table(Crime_clean$CrimeCode) #no cleaning needed
table(Crime_clean$CrimeCodeDesc) #no cleaning needed
table(Crime_clean$VictimeAge) #no cleaning needed
table(Crime_clean$VictimSex) #no cleaning needed
table(Crime_clean$VictimEthnicity) #no cleaning needed
table(Crime_clean$CrimeSceneCode) #no cleaning needed
table(Crime_clean$CrimeSceneDesc) #no cleaning needed
table(Crime_clean$CaseStatus) #no cleaning needed
table(Crime_clean$CaseStatusDesc) #no cleaning needed
table(Crime_clean$CrimeCode1) #no cleaning needed
table(Crime_clean$CrimeCode2) #no cleaning needed
table(Crime_clean$AddressCrime) #no cleaning needed
table(Crime_clean$LatitudeCrime) #no cleaning needed
table(Crime_clean$LongitudeCrime) #no cleaning needed
table(Crime_clean$CriminalCharacteristicCodes) #no cleaning needed
table(Crime_clean$WeaponUsedCode) #no cleaning needed
table(Crime_clean$WeaponUsedDesc) #no cleaning needed
table(Crime_clean$CrossStreet) #no cleaning needed
table(Crime_clean$CrimeCode3) #no cleaning needed
folder <- "DataCleanAndFormatted"
# Check if the folder exists
if (!dir.exists(folder)) {
# Create the folder
dir.create(folder)
write.csv(Crime_clean,file.path(folder,"Crime_clean.csv"))
} else {
write.csv(Crime_clean,file.path(folder,"Crime_clean.csv"))}
Crime_clean$AddressCrime
Crime_clean$AddressCrime_new <- gsub("\\s+", " ", Crime_clean$AddressCrime)
Crime_clean$AddressCrime_new
Crime_clean$CriminalCharacteristicCodes_new =  Crime_clean$CriminalCharacteristicCodes
library(tidyverse)
cols <- paste0("Code_", 1:10)
Crime_clean2 <- Crime_clean %>% separate(CriminalCharacteristicCodes_new, sep = " ", into = cols )
View(Crime_clean2)
Crime_clean2 <- Crime_clean2 %>%
mutate(VictimSex = fct_recode(VictimSex,
"Male" = "M",
"Female" = "F",
"Unknown" = "X"))
str(Crime_clean2)
Crime_clean2 <- Crime_clean2 %>%
mutate(VictimEthnicity = fct_recode(VictimEthnicity,
"Other Asian" = "A",
"Black" = "B",
"Chinese" = "C",
"Cambodian" = "D",
"Japanese" = "J",
"Korean" = "K",
"Laotian" = "L",
"Other" = "O",
"Pacific Islander" = "P",
"Samoan" = "S",
"Hawaiian" = "U",
"Vietnamese" = "V",
"White" = "W",
"Unknown" = "X",
"Asian Indian", "Z"))
str(Crime_clean2)
table(Crime_clean$VictimEthnicity) #no cleaning needed
Crime_clean2 <- Crime_clean2 %>%
mutate(VictimEthnicity = fct_recode(VictimEthnicity,
"Other Asian" = "A",
"Black" = "B",
"Chinese" = "C",
"Cambodian" = "D",
"Filipino" = "F",
"Guamanian" = "G",
"Hispanic/Latin/Mexican" = "H",
"American Indian/Alaskan Native" = "I",
"Japanese" = "J",
"Korean" = "K",
"Laotian" = "L",
"Other" = "O",
"Pacific Islander" = "P",
"Samoan" = "S",
"Hawaiian" = "U",
"Vietnamese" = "V",
"White" = "W",
"Unknown" = "X",
"Asian Indian", "Z"))
Crime_clean2 <- Crime_clean2 %>%
mutate(VictimEthnicity = fct_recode(VictimEthnicity,
"Other Asian" = "A",
"Black" = "B",
"Chinese" = "C",
"Cambodian" = "D",
"Filipino" = "F",
"Guamanian" = "G",
"Hispanic/Latin/Mexican" = "H",
"American Indian/Alaskan Native" = "I",
"Japanese" = "J",
"Korean" = "K",
"Laotian" = "L",
"Other" = "O",
"Pacific Islander" = "P",
"Samoan" = "S",
"Hawaiian" = "U",
"Vietnamese" = "V",
"White" = "W",
"Unknown" = "X",
"Asian Indian", "Z"))
table(Crime_clean$VictimEthnicity) #no cleaning needed
Crime_clean2 <- Crime_clean2 %>%
mutate(VictimEthnicity = fct_recode(VictimEthnicity,
"Other Asian" = "A",
"Black" = "B",
"Chinese" = "C",
"Filipino" = "F",
"Hispanic/Latin/Mexican" = "H",
"American Indian/Alaskan Native" = "I",
"Japanese" = "J",
"Korean" = "K",
"Other" = "O",
"Pacific Islander" = "P",
"Samoan" = "S",
"Vietnamese" = "V",
"White" = "W"))
str(Crime_clean2)
Crime_clean2 <- Crime_clean2 %>%
mutate(VictimEthnicity = fct_recode(VictimEthnicity,
"Other Asian" = "A",
"Black" = "B",
"Chinese" = "C",
"Filipino" = "F",
"Hispanic/Latin/Mexican" = "H",
"American Indian/Alaskan Native" = "I",
"Japanese" = "J",
"Korean" = "K",
"Other" = "O",
"Pacific Islander" = "P",
"Samoan" = "S",
"Vietnamese" = "V",
"White" = "W",
"Unknown" = "X"))
str(Crime_clean2)
folder = "DataCleanAndFormatted"
# Check if the folder exists
if (!dir.exists(folder)) {
# Create the folder
dir.create(folder)
saveRDS(Crime_clean2,file.path(folder,"
Crime_formatted.RDS"))
} else {
saveRDS(Crime_clean2,file.path(folder,"Crime_formatted.RDS"))
}
# Chunk 1
setwd("C:/Users/CarlinML/DACSS-690R/Second_Deliverable")
getwd()
# Chunk 2
SMMH_dirty <- read.csv("https://github.com/DACSS-690R/First_Deliverable/raw/refs/heads/main/dataFiles/Social_Media_and_Mental_Health.csv",check.names=F)
SMMH_dirty
# Chunk 3
SMMH_dirty[,]=sapply(SMMH_dirty[,],trimws)
SMMH_clean=SMMH_dirty[,]
View(SMMH_clean)
str(SMMH_clean)
# Chunk 4
library(dplyr)
SMMH_clean <- rename(SMMH_clean,
Age = "1. What is your age?",
Gender = "2. Gender",
RelStatus = "3. Relationship Status",
OccStatus = "4. Occupation Status",
OrgAffil = "5. What type of organizations are you affiliated with?",
UseSocialMedia = "6. Do you use social media?",
Platforms = "7. What social media platforms do you commonly use?",
AmtTime = "8. What is the average time you spend on social media every day?",
WoutPurpose = "9. How often do you find yourself using Social media without a specific purpose?",
Distracted = "10. How often do you get distracted by Social media when you are busy doing something?",
Restless = "11. Do you feel restless if you haven't used Social media in a while?",
EasilyDist = "12. On a scale of 1 to 5, how easily distracted are you?",
Bothered = "13. On a scale of 1 to 5, how much are you bothered by worries?",
DiffConcen = "14. Do you find it difficult to concentrate on things?",
Compare = "15. On a scale of 1-5, how often do you compare yourself to other successful people through the use of social media?",
Comparisons = "16. Following the previous question, how do you feel about these comparisons, generally speaking?",
Validation = "17. How often do you look to seek validation from features of social media?",
Depressed = "18. How often do you feel depressed or down?",
Interest = "19. On a scale of 1 to 5, how frequently does your interest in daily activities fluctuate?",
Sleep = "20. On a scale of 1 to 5, how often do you face issues regarding sleep?")
# Chunk 5
SMMH_clean$Timestamp=strptime(SMMH_clean$Timestamp, "%m/%d/%Y %H:%M:%S")
str(SMMH_clean)
# Chunk 6
table(SMMH_clean$Gender)
SMMH_clean[SMMH_clean$Gender=='NB','Gender']='Non-binary'
SMMH_clean[SMMH_clean$Gender=='Non binary','Gender']='Non-binary'
SMMH_clean[SMMH_clean$Gender=='Nonbinary','Gender']='Non-binary'
SMMH_clean[SMMH_clean$Gender=='unsure','Gender']='NA'
SMMH_clean[SMMH_clean$Gender=='There are others???','Gender']='NA'
table(SMMH_clean$Gender)
# Chunk 7
table(SMMH_clean$RelStatus) # no cleaning needed
table(SMMH_clean$OccStatus) # no cleaning needed
table(SMMH_clean$OrgAffil) # clean up N/As
SMMH_clean$OrgAffil <- gsub("Goverment", "Government",
gsub("N/A", "NA",
gsub(", N/A", "", SMMH_clean$OrgAffil)))
table(SMMH_clean$OrgAffil)
# Chunk 8
table(SMMH_clean$UseSocialMedia) # no cleaning needed
table(SMMH_clean$Platforms) # may need to clean but would be easier if data was formatted differently
table(SMMH_clean$AmtTime) # no cleaning needed
# Chunk 9
folder <- "DataCleanAndFormatted"
# Check if the folder exists
if (!dir.exists(folder)) {
# Create the folder
dir.create(folder)
write.csv(SMMH_clean,file.path(folder,"SMMH_clean.csv"),row.names = F)
} else {
write.csv(SMMH_clean,file.path(folder,"SMMH_clean.csv"),row.names = F)}
# Chunk 10
linkSMMH_clean='https://github.com/DACSS-690R/Second_Deliverable/raw/refs/heads/main/DataCleanAndFormatted/SMMH_clean.csv'
SMMH_clean=read.csv(linkSMMH_clean)
str(SMMH_clean)
# Chunk 11
SMMH_clean$Gender_label <- as.factor(SMMH_clean$Gender)
SMMH_clean$RelStatus_label <- as.factor(SMMH_clean$RelStatus)
SMMH_clean$OccStatus_label <- as.factor(SMMH_clean$OccStatus)
SMMH_clean$OrgAffil_label <- as.factor(SMMH_clean$OrgAffil)
SMMH_clean$UseSocialMedia_label <- as.factor(SMMH_clean$UseSocialMedia)
str(SMMH_clean)
# Chunk 12
# map for replacement: 1 the lowest # hours / 6 the highest # hours
map_AmtTime <- c("Less than an Hour"=1, "Between 1 and 2 hours"=2,"Between 2 and 3 hours"=3, "Between 3 and 4 hours"=4, "Between 4 and 5 hours"=5, "More than 5 hours"=6)
SMMH_clean$AmtTime_int=map_AmtTime[SMMH_clean$AmtTime]
SMMH_clean$AmtTime_label <- factor(SMMH_clean$AmtTime_int, levels = seq(1,6),labels = c('1_Less than an Hour','2_Between 1 and 2 hours','3_Between 2 and 3 hours','4_Between 3 and 4 hours','5_Between 4 and 5 hours', '6_More than 5 hours'),ordered = TRUE)
# Chunk 13
theInts=seq(1,5)
theLabels=c('1_Strongly Disagree','2_Disagree','3_Neutral','4_Agree','5_Strongly Agree')
FormatOrdinal=function(col) factor(col,
levels = theInts,
labels = theLabels,
ordered = TRUE)
names <- c(10:21)
SMMH_clean[names]=lapply(SMMH_clean[names],FormatOrdinal)
str(SMMH_clean)
# Chunk 14
folder = "DataCleanAndFormatted"
# Check if the folder exists
if (!dir.exists(folder)) {
# Create the folder
dir.create(folder)
saveRDS(SMMH_clean,file.path(folder,"SMMH_formatted.RDS"))
} else {
saveRDS(SMMH_clean,file.path(folder,"SMMH_formatted.RDS"))
}
# Chunk 15
library(readxl)
destfile <- path.expand("ClerkshipGrades.xlsx")
url      <- paste0("https://github.com/DACSS-690R/First_Deliverable/raw/refs/heads/main/dataFiles/UMassChan_ClerkshipGrades.xlsx")
download.file(url, destfile = destfile, mode = "wb")
ClerkshipGrades_dirty <- read_xlsx(destfile, skip=1)
ClerkshipGrades_dirty
# Chunk 16
ClerkshipGrades_dirty[,]=sapply(ClerkshipGrades_dirty[,],trimws)
ClerkshipGrades_clean=ClerkshipGrades_dirty[,]
View(ClerkshipGrades_clean)
str(ClerkshipGrades_clean)
# Chunk 17
ClerkshipGrades_clean <- rename(ClerkshipGrades_clean,
NBME_Letter = `NBME-Written_Letter`,
NBME_Numeric = `NBME-Written_Numeric`)
# Chunk 18
table(ClerkshipGrades_clean$Subject) # no cleaning needed
table(ClerkshipGrades_clean$Catalog) # no cleaning needed
table(ClerkshipGrades_clean$Session) # no cleaning needed
table(ClerkshipGrades_clean$Location) # no cleaning needed
table(ClerkshipGrades_clean$Final_Letter)
ClerkshipGrades_clean <- ClerkshipGrades_clean %>%
mutate(Final_Letter2 = recode(Final_Letter,
"HH" = "High Honors",
"H" = "Honors",
"P" = "Pass",
"S" = "Satisfactory",
"F" = "Fail",
"I" = "Incomplete"))
table(ClerkshipGrades_clean$Final_Letter2)
table(ClerkshipGrades_clean$SPE_Letter)
ClerkshipGrades_clean <- ClerkshipGrades_clean %>%
mutate(SPE_Letter2 = recode(SPE_Letter,
"HONORS" = "Honors"))
table(ClerkshipGrades_clean$SPE_Letter2)
table(ClerkshipGrades_clean$NBME_Letter)
ClerkshipGrades_clean <- ClerkshipGrades_clean %>%
mutate(NBME_Letter2 = recode(NBME_Letter,
"HIGH HONORS" = "High Honors",
"HONORS" = "Honors",
"PASS" = "Pass"))
table(ClerkshipGrades_clean$NBME_Letter2)
table(ClerkshipGrades_clean$OSCE_Letter)
ClerkshipGrades_clean <- ClerkshipGrades_clean %>%
mutate(OSCE_Letter2 = recode(OSCE_Letter,
"HIGH HONORS" = "High Honors",
"HONORS" = "Honors",
"PASS" = "Pass"))
table(ClerkshipGrades_clean$OSCE_Letter2)
# Chunk 19
ClerkshipGrades_clean[!complete.cases(ClerkshipGrades_clean),]
ClerkshipGrades_clean[1,]
colSums(is.na(apply(ClerkshipGrades_clean[,c(10,12,14,16)],2, as.numeric)))
detectWrongNA= function(col){col[grep("[^\\d+\\.*\\d*]", col, perl=T,invert = F)]}
badSymbolNum=sapply(ClerkshipGrades_clean[, c('Final_Numeric','SPE_Numeric','NBME_Numeric', 'OSCE_Numeric')],detectWrongNA)
badSymbolNum_unlist=unlist(badSymbolNum)
badSymbolNum_vector=unique(badSymbolNum_unlist)
badSymbolNum_vector
ClerkshipGrades_clean[, c('Final_Numeric','SPE_Numeric','NBME_Numeric', 'OSCE_Numeric')]=lapply(ClerkshipGrades_clean[, c('Final_Numeric','SPE_Numeric','NBME_Numeric', 'OSCE_Numeric')],function(col) ifelse((col %in% badSymbolNum_vector), NA, col))
ClerkshipGrades_clean
# Chunk 20
folder <- "DataCleanAndFormatted"
# Check if the folder exists
if (!dir.exists(folder)) {
# Create the folder
dir.create(folder)
write.csv(SMMH_clean,file.path(folder,"ClerkshipGrades_clean.csv"))
} else {
write.csv(ClerkshipGrades_clean,file.path(folder,"ClerkshipGrades_clean.csv"))}
# Chunk 21
linkClerkshipGrades_clean='https://github.com/DACSS-690R/Second_Deliverable/raw/refs/heads/main/DataCleanAndFormatted/ClerkshipGrades_clean.csv'
ClerkshipGrades_clean=read.csv(linkClerkshipGrades_clean)
str(ClerkshipGrades_clean)
# Chunk 22
ClerkshipGrades_clean[,16:19] <- lapply(ClerkshipGrades_clean[,16:19],toupper)
Likert_cols <- c(16:19)
ClerkshipGrades_clean[,Likert_cols] <- lapply(ClerkshipGrades_clean[,Likert_cols] , factor, ordered = TRUE, levels = c("FAIL", "INCOMPLETE", "SATISFACTORY", "PASS", "HONORS", "HIGH HONORS"))
str(ClerkshipGrades_clean)
# Chunk 23
folder = "DataCleanAndFormatted"
# Check if the folder exists
if (!dir.exists(folder)) {
# Create the folder
dir.create(folder)
saveRDS(ClerkshipGrades_clean,file.path(folder,"
ClerkshipGrades_formatted.RDS"))
} else {
saveRDS(ClerkshipGrades_clean,file.path(folder,"ClerkshipGrades_formatted.RDS"))
}
# Chunk 24
Crime_dirty <- read.csv("https://github.com/DACSS-690R/First_Deliverable/raw/refs/heads/main/dataFiles/Crime_Data_from_2020_to_Present_subset.csv",check.names=F)
Crime_dirty
# Chunk 25
Crime_dirty[,]=sapply(Crime_dirty[,],trimws)
Crime_clean=Crime_dirty[,]
Crime_clean=Crime_clean[,2:28]
View(Crime_clean)
str(Crime_clean)
# Chunk 26
Crime_clean <- rename(Crime_clean,
RecordNumber = "dr_no",
DateReported = "date_rptd",
DateOccurred = "date_occ",
TimeOccurred = "time_occ",
GeographicAreaID = "area",
GeographicAreaName = "area_name",
GeographicSubAreaID = "rpt_dist_no",
Part1_2 = "part_1_2",
CrimeCode = "crm_cd",
CrimeCodeDesc = "crm_cd_desc",
VictimAge = "vict_age",
VictimSex = "vict_sex",
VictimEthnicity = "vict_descent",
CrimeSceneCode = "premis_cd",
CrimeSceneDesc = "premis_desc",
CaseStatus = "status",
CaseStatusDesc = "status_desc",
CrimeCode1 = "crm_cd_1",
CrimeCode2 = "crm_cd_2",
AddressCrime = "location",
LatitudeCrime = "lat",
LongitudeCrime = "lon",
CriminalCharacteristicCodes = "mocodes",
WeaponUsedCode = "weapon_used_cd",
WeaponUsedDesc = "weapon_desc",
CrossStreet = "cross_street",
CrimeCode3 = "crm_cd_3")
# Chunk 27
Crime_clean$DateReported=strptime(Crime_clean$DateReported, "%Y-%m-%dT%H:%M:%S")
Crime_clean$DateOccurred=strptime(Crime_clean$DateOccurred, "%Y-%m-%dT%H:%M:%S")
str(Crime_clean)
# Chunk 28
table(Crime_clean$GeographicAreaID) #no cleaning needed
table(Crime_clean$GeographicAreaName) #no cleaning needed
table(Crime_clean$GeographicSubAreaID) #no cleaning needed
table(Crime_clean$Part1_2) #no cleaning needed
table(Crime_clean$CrimeCode) #no cleaning needed
table(Crime_clean$CrimeCodeDesc) #no cleaning needed
table(Crime_clean$VictimeAge) #no cleaning needed
table(Crime_clean$VictimSex) #no cleaning needed
table(Crime_clean$VictimEthnicity) #no cleaning needed
table(Crime_clean$CrimeSceneCode) #no cleaning needed
table(Crime_clean$CrimeSceneDesc) #no cleaning needed
table(Crime_clean$CaseStatus) #no cleaning needed
table(Crime_clean$CaseStatusDesc) #no cleaning needed
table(Crime_clean$CrimeCode1) #no cleaning needed
table(Crime_clean$CrimeCode2) #no cleaning needed
table(Crime_clean$AddressCrime) #no cleaning needed
table(Crime_clean$LatitudeCrime) #no cleaning needed
table(Crime_clean$LongitudeCrime) #no cleaning needed
table(Crime_clean$CriminalCharacteristicCodes) #no cleaning needed
table(Crime_clean$WeaponUsedCode) #no cleaning needed
table(Crime_clean$WeaponUsedDesc) #no cleaning needed
table(Crime_clean$CrossStreet) #no cleaning needed
table(Crime_clean$CrimeCode3) #no cleaning needed
# Chunk 29
folder <- "DataCleanAndFormatted"
# Check if the folder exists
if (!dir.exists(folder)) {
# Create the folder
dir.create(folder)
write.csv(Crime_clean,file.path(folder,"Crime_clean.csv"))
} else {
write.csv(Crime_clean,file.path(folder,"Crime_clean.csv"))}
# Chunk 30
Crime_clean$AddressCrime
Crime_clean$AddressCrime_new <- gsub("\\s+", " ", Crime_clean$AddressCrime)
Crime_clean$AddressCrime_new
# Chunk 31
Crime_clean$CriminalCharacteristicCodes_new =  Crime_clean$CriminalCharacteristicCodes
library(tidyverse)
cols <- paste0("Code_", 1:10)
Crime_clean2 <- Crime_clean %>% separate(CriminalCharacteristicCodes_new, sep = " ", into = cols )
View(Crime_clean2)
# Chunk 32
Crime_clean2 <- Crime_clean2 %>%
mutate(VictimSex = fct_recode(VictimSex,
"Male" = "M",
"Female" = "F",
"Unknown" = "X"))
str(Crime_clean2)
# Chunk 33
Crime_clean2 <- Crime_clean2 %>%
mutate(VictimEthnicity = fct_recode(VictimEthnicity,
"Other Asian" = "A",
"Black" = "B",
"Chinese" = "C",
"Filipino" = "F",
"Hispanic/Latin/Mexican" = "H",
"American Indian/Alaskan Native" = "I",
"Japanese" = "J",
"Korean" = "K",
"Other" = "O",
"Pacific Islander" = "P",
"Samoan" = "S",
"Vietnamese" = "V",
"White" = "W",
"Unknown" = "X"))
str(Crime_clean2)
# Chunk 34
folder = "DataCleanAndFormatted"
# Check if the folder exists
if (!dir.exists(folder)) {
# Create the folder
dir.create(folder)
saveRDS(Crime_clean2,file.path(folder,"
Crime_formatted.RDS"))
} else {
saveRDS(Crime_clean2,file.path(folder,"Crime_formatted.RDS"))
}
